# Form implementation generated from reading ui file 'STS_Explain.ui'
#
# Created by: PyQt6 UI code generator 6.7.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from decimal import Decimal
import time


class Ui_Frame(object):

    def line(self):
        line_STS = str(self.Line_Input.text())  # input('Copy the Line\n')
        # return line_STS
        values = self.STS_Split(line_STS)
        self.STS_Explanation(*values)

    def STS_Split(self, line_STS):
        line_STS_list = []
        line_STS = line_STS[:-8]
        line_STS_1 = line_STS.replace('<', '')
        line_STS_2 = line_STS_1.replace('FULL', '')
        line_STS_3 = line_STS_2.replace('!STS', '')
        line_STS_list = line_STS_3.split()
        Time, Device, Basket_Detection, Beaker_Detection, Temperature, Temp_Stat, Heater_STS, Temperate_STS, Error_Detection, System_STS, Run_Time, Cell_STS, Client_STS = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        Time, Device, Basket_Detection, Beaker_Detection, Temperature, Temp_Stat, Heater_STS, Temperate_STS, Error_Detection, System_STS, Run_Time, Cell_STS, Client_STS = [
            line_STS_list[i] for i in (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)]
        Device = Device[0:2]
        Device = int(Device)
        Basket_Detection = int(Basket_Detection)
        Beaker_Detection = int(Beaker_Detection)
        Temperature = float(Temperature)
        Temp_Stat = float(Temp_Stat)
        Heater_STS = int(Heater_STS)
        Temperate_STS = int(Temperate_STS)
        Error_Detection = int(Error_Detection)
        System_STS = int(System_STS)
        Run_Time = int(Run_Time)
        Cell_STS = int(Cell_STS)
        Client_STS = int(Client_STS)
        # print(line_STS_list)
        return Time, Device, Basket_Detection, Beaker_Detection, Temperature, Temp_Stat, Heater_STS, Temperate_STS, Error_Detection, System_STS, Run_Time, Cell_STS, Client_STS

    def STS_Explanation(self, Time, Device, Basket_Detection, Beaker_Detection, Temperature, Temp_Stat, Heater_STS, Temperate_STS, Error_Detection, System_STS, Run_Time, Cell_STS, Client_STS):
        Device_out = ''
        Time_out = 0
        # Time
        print(Time)
        Time_out == Time
        # Device
        if Device == 1:
            Device_out == 'Master'
            print('Master')
        else:
            Device_out == 'Client'
            print('Client')
        self.Device.setText(str(Device_out))
        # Basket_Detection
        if Basket_Detection == 0:
            print('No Basket connected')
        elif Basket_Detection == 1:
            print('6 postions Basket')
        elif Basket_Detection == 2:
            print('3 positions Basket')
        elif Basket_Detection == -1:
            print('Incompatible Basket Firmware')
        else:
            print('Incompatible Mounting Firmware')
        # Beaker_Detection
        if Beaker_Detection == 1:
            print('Beaker detected')
        else:
            print('Beaker not detected')
        # Temperature
        print('Temperature is:', Temperature)
        # Heater Status
        if Heater_STS == 1:
            print('heater is ON')
        else:
            print('Heater is OFF')
        # Temperate Status
        if Temperate_STS == 1:
            print('System is temperated')
        else:
            print('System is not temperated yet')
        # Error Detection
        if Error_Detection == 0:
            print('No error detected')
        else:
            print('Error detected')
        # System Status
        if System_STS == 0:
            print('System is idled')
        elif System_STS == 1:
            print('System is in move in test')
        elif System_STS == 2:
            print('System is in test')
        elif System_STS == 3:
            print('System move out of test')
        elif System_STS == 4:
            print('System is no reday for test')
        elif System_STS == 5:
            print('Test move in hold')
        elif System_STS == 6:
            print('Test is in hold')
        elif System_STS == 7:
            print('Test move out of hold')
        # run time
        print('Run time is', Run_Time, 's or', time.strftime(
            "%H h %M min %S s", time.gmtime(Run_Time)))
        # Cell Status
        bin_val_list = []
        if Basket_Detection == 1:
            bin_val = bin(Cell_STS)
            bin_val = bin_val[2:]
            bin_val = int(bin_val)
            bin_val = format(bin_val, '018')
            # analyze by cell
            # create a new list with result for each cell
            cell_1, cell_2, cell_3, cell_4, cell_5, cell_6 = [
                bin_val[j] for j in (0, 1, 2, 3, 4, 5)]
            # cell triggered time
            print('\n')
            print('Information Cell 1:')
            if cell_1 == '000':
                print('No Detection')
            elif cell_1 == '010':
                print('Manual Detection')
            else:
                print('Automatic Detection')
            print('\n')
            print('Information Cell 2:')
            if cell_2 == '000':
                print('No Detection')
            elif cell_2 == '010':
                print('Manual Detection')
            else:
                print('Automatic Detection')
            print('\n')
            print('Information Cell 3:')
            if cell_3 == '000':
                print('No Detection')
            elif cell_3 == '010':
                print('Manual Detection')
            else:
                print('Automatic Detection')
            print('\n')
            print('Information Cell 4:')
            if cell_4 == '000':
                print('No Detection')
            elif cell_4 == '010':
                print('Manual Detection')
            else:
                print('Automatic Detection')
            print('\n')
            print('Information Cell 5:')
            if cell_5 == '000':
                print('No Detection')
            elif cell_5 == '010':
                print('Manual Detection')
            else:
                print('Automatic Detection')
            print('\n')
            print('Information Cell 6:')
            if cell_6 == '000':
                print('No Detection')
            elif cell_6 == '010':
                print('Manual Detection')
            else:
                print('Automatic Detection')
        else:
            bin_val = bin(Cell_STS)
            bin_val = bin_val[2:]
            bin_val = int(bin_val)
            bin_val = format(bin_val, '09')
        # separate by group of 3
        bin_val_G3 = [bin_val[i:i+3] for i in range(0, len(bin_val), 3)]
        # print(bin_val_Client_G3)
        # analyze by cell
        # create a new list with result for each cell
        cell_1, cell_2, cell_3 = [bin_val_G3[j] for j in (0, 1, 2)]
        # cell triggered time
        print('\n')
        print('Information Cell 1:')
        if cell_1 == '000':
            print('No Detection')
        elif cell_1 == '010':
            print('Manual Detection')
        else:
            print('Automatic Detection')
        print('\n')
        print('Information Cell 2:')
        if cell_2 == '000':
            print('No Detection')
        elif cell_2 == '010':
            print('Manual Detection')
        else:
            print('Automatic Detection')
        print('\n')
        print('Information Cell 3:')
        if cell_3 == '000':
            print('No Detection')
        elif cell_3 == '010':
            print('Manual Detection')
        else:
            print('Automatic Detection')
        print('\n')
        return Device_out, Time_out

    def setupUi(self, Frame):
        Frame.setObjectName("Frame")
        Frame.resize(1653, 306)
        self.Line_Input = QtWidgets.QLineEdit(parent=Frame)
        self.Line_Input.setGeometry(QtCore.QRect(40, 80, 1171, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.Line_Input.setFont(font)
        self.Line_Input.setObjectName("Line_Input")
        self.Titre = QtWidgets.QLabel(parent=Frame)
        self.Titre.setGeometry(QtCore.QRect(40, 10, 271, 51))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.Titre.setFont(font)
        self.Titre.setObjectName("Titre")
        self.Device = QtWidgets.QLabel(parent=Frame)
        self.Device.setGeometry(QtCore.QRect(40, 140, 71, 51))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.Device.setFont(font)
        self.Device.setObjectName("Device")
        self.BasketDetection = QtWidgets.QLabel(parent=Frame)
        self.BasketDetection.setGeometry(QtCore.QRect(180, 140, 161, 51))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.BasketDetection.setFont(font)
        self.BasketDetection.setObjectName("BasketDetection")
        self.BeakerDetection = QtWidgets.QLabel(parent=Frame)
        self.BeakerDetection.setGeometry(QtCore.QRect(400, 140, 161, 51))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.BeakerDetection.setFont(font)
        self.BeakerDetection.setObjectName("BeakerDetection")
        self.Temperature = QtWidgets.QLabel(parent=Frame)
        self.Temperature.setGeometry(QtCore.QRect(640, 140, 121, 51))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.Temperature.setFont(font)
        self.Temperature.setObjectName("Temperature")
        self.Heater = QtWidgets.QLabel(parent=Frame)
        self.Heater.setGeometry(QtCore.QRect(860, 140, 71, 51))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.Heater.setFont(font)
        self.Heater.setObjectName("Heater")
        self.Temperate = QtWidgets.QLabel(parent=Frame)
        self.Temperate.setGeometry(QtCore.QRect(980, 140, 111, 51))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.Temperate.setFont(font)
        self.Temperate.setObjectName("Temperate")
        self.ErrorDetection = QtWidgets.QLabel(parent=Frame)
        self.ErrorDetection.setGeometry(QtCore.QRect(1120, 140, 151, 51))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.ErrorDetection.setFont(font)
        self.ErrorDetection.setObjectName("ErrorDetection")
        self.SystemStatus = QtWidgets.QLabel(parent=Frame)
        self.SystemStatus.setGeometry(QtCore.QRect(1300, 140, 151, 51))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.SystemStatus.setFont(font)
        self.SystemStatus.setObjectName("SystemStatus")
        self.RunTime = QtWidgets.QLabel(parent=Frame)
        self.RunTime.setGeometry(QtCore.QRect(1500, 140, 111, 51))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.RunTime.setFont(font)
        self.RunTime.setObjectName("RunTime")
        self.Go_Button = QtWidgets.QPushButton(parent=Frame)
        self.Go_Button.clicked.connect(self.line)
        self.Go_Button.setGeometry(QtCore.QRect(1240, 80, 91, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.Go_Button.setFont(font)
        self.Go_Button.setObjectName("Go_Button")
        self.lineEdit_Device = QtWidgets.QLineEdit(parent=Frame)
        self.lineEdit_Device.setGeometry(QtCore.QRect(20, 200, 111, 51))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.lineEdit_Device.setFont(font)
        self.lineEdit_Device.setObjectName("lineEdit_Device")
        self.lineEdit_Basket_Detection = QtWidgets.QLineEdit(parent=Frame)
        self.lineEdit_Basket_Detection.setGeometry(
            QtCore.QRect(180, 200, 161, 51))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.lineEdit_Basket_Detection.setFont(font)
        self.lineEdit_Basket_Detection.setObjectName(
            "lineEdit_Basket_Detection")
        self.lineEdit_Beaker_Detection = QtWidgets.QLineEdit(parent=Frame)
        self.lineEdit_Beaker_Detection.setGeometry(
            QtCore.QRect(440, 200, 71, 51))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.lineEdit_Beaker_Detection.setFont(font)
        self.lineEdit_Beaker_Detection.setObjectName(
            "lineEdit_Beaker_Detection")
        self.lineEdit_Temperature = QtWidgets.QLineEdit(parent=Frame)
        self.lineEdit_Temperature.setGeometry(QtCore.QRect(650, 200, 101, 51))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.lineEdit_Temperature.setFont(font)
        self.lineEdit_Temperature.setObjectName("lineEdit_Temperature")
        self.lineEdit_Heater = QtWidgets.QLineEdit(parent=Frame)
        self.lineEdit_Heater.setGeometry(QtCore.QRect(860, 200, 71, 51))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.lineEdit_Heater.setFont(font)
        self.lineEdit_Heater.setObjectName("lineEdit_Heater")
        self.lineEdit_Temperate = QtWidgets.QLineEdit(parent=Frame)
        self.lineEdit_Temperate.setGeometry(QtCore.QRect(990, 200, 71, 51))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.lineEdit_Temperate.setFont(font)
        self.lineEdit_Temperate.setObjectName("lineEdit_Temperate")
        self.lineEdit_Error = QtWidgets.QLineEdit(parent=Frame)
        self.lineEdit_Error.setGeometry(QtCore.QRect(1150, 200, 71, 51))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.lineEdit_Error.setFont(font)
        self.lineEdit_Error.setObjectName("lineEdit_Error")
        self.lineEdit_System_Status = QtWidgets.QLineEdit(parent=Frame)
        self.lineEdit_System_Status.setGeometry(
            QtCore.QRect(1300, 200, 141, 51))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.lineEdit_System_Status.setFont(font)
        self.lineEdit_System_Status.setObjectName("lineEdit_System_Status")
        self.lineEdit_Run_Time = QtWidgets.QLineEdit(parent=Frame)
        self.lineEdit_Run_Time.setGeometry(QtCore.QRect(1490, 200, 141, 51))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.lineEdit_Run_Time.setFont(font)
        self.lineEdit_Run_Time.setObjectName("lineEdit_Run_Time")
        self.textBrowser_Device = QtWidgets.QTextBrowser(parent=Frame)
        self.textBrowser_Device.setGeometry(QtCore.QRect(20, 260, 111, 51))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.textBrowser_Device.setFont(font)
        self.textBrowser_Device.setFrameShape(QtWidgets.QFrame.Shape.Panel)
        self.textBrowser_Device.setObjectName("textBrowser_Device")

        self.retranslateUi(Frame)
        QtCore.QMetaObject.connectSlotsByName(Frame)

    def retranslateUi(self, Frame):
        _translate = QtCore.QCoreApplication.translate
        Frame.setWindowTitle(_translate("Frame", "Frame"))
        self.Titre.setText(_translate(
            "Frame", "Enter the log line to analyze"))
        self.Device.setText(_translate("Frame", "Device"))
        self.BasketDetection.setText(_translate("Frame", "Basket Detection"))
        self.BeakerDetection.setText(_translate("Frame", "Beaker Detection"))
        self.Temperature.setText(_translate("Frame", "Temperature"))
        self.Heater.setText(_translate("Frame", "Heater"))
        self.Temperate.setText(_translate("Frame", "Temperate"))
        self.ErrorDetection.setText(_translate("Frame", "Error Detection"))
        self.SystemStatus.setText(_translate("Frame", "System Status"))
        self.RunTime.setText(_translate("Frame", "Run Time"))
        self.Go_Button.setText(_translate("Frame", "GO"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Frame = QtWidgets.QFrame()
    ui = Ui_Frame()
    ui.setupUi(Frame)
    Frame.show()
    sys.exit(app.exec())


def main():
    line_STS()
    Time, Device, Basket_Detection, Beaker_Detection, Temperature, Temp_Stat, Heater_STS, Temperate_STS, Error_Detection, System_STS, Run_Time, Cell_STS, Client_STS = STS_Split(
        self, line_STS)
    STS_Explanation(self, Time, Device, Basket_Detection, Beaker_Detection, Temperature, Temp_Stat,
                    Heater_STS, Temperate_STS, Error_Detection, System_STS, Run_Time, Cell_STS, Client_STS)


# line_STS = line()
# Time, Device, Basket_Detection, Beaker_Detection, Temperature, Temp_Stat, Heater_STS, Temperate_STS, Error_Detection, System_STS, Run_Time, Cell_STS, Client_STS = STS_Split(line_STS)
# STS_Explanation(Time, Device, Basket_Detection, Beaker_Detection, Temperature, Temp_Stat, Heater_STS, Temperate_STS, Error_Detection, System_STS, Run_Time, Cell_STS, Client_STS)
